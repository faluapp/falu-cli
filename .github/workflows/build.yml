name: Build

on:
  push:
    # branches:
    # - main
    tags:
    - '*'
    paths-ignore:
    - README.md
    - LICENSE
    - CHANGELOG.md
    - docs/**
  pull_request:
    branches:
    - main
    paths-ignore:
    - README.md
    - LICENSE
    - CHANGELOG.md
    - docs/**
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the action'
        required: false
        default: 'Pre-Release'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  PKG_NAME: 'falu'
  PKG_DESCRIPTION: 'Falu CLI'
  PKG_MAINTAINER: 'Falu <support@falu.io>'
  PKG_HOMEPAGE: 'https://falu.io'
  PKG_VENDOR: FALU TECHNOLOGIES LIMITED
  PKG_LICENSE: MIT

jobs:
  Build:
    strategy:
      fail-fast: true
      matrix:
        config:
        # list of RIDs (Runtime Identifiers) can be found at:
        # https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
        - { os: ubuntu-latest, rid: linux-x64, deb-arch: amd64, rpm-arch: x86_64 }
        - { os: ubuntu-latest, rid: linux-arm64, deb-arch: arm64, rpm-arch: aarch64 }
        - { os: windows-latest, rid: win-x64 }
        - { os: windows-latest, rid: win-arm64 }
        # macos-latest uses macos-12 which fails to build the app
        # macos-13 is in preview, we can switch when it becomes the latest one
        - { os: macos-13, rid: osx-x64 } # macos-latest
        - { os: macos-13, rid: osx-arm64 } # macos-latest

    runs-on: ${{ matrix.config.os }}

    outputs:
      BINARIES_VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion
        submodules: true

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0
      id: gitversion
      with:
        useConfigFile: true

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.x'

    - name: Install dependencies
      run: dotnet restore --runtime ${{ matrix.config.rid }} -v detailed

    - name: Build
      if: github.event_name == 'pull_request'
      run: dotnet build --configuration Release --no-restore

    - name: Test
      if: github.event_name == 'pull_request'
      run: dotnet test --configuration Release --no-build --collect "Code coverage"

    - name: Publish
      run: >
        dotnet publish
        -p:PublishSingleFile=true
        -p:DebugType=None
        -p:DebugSymbols=false
        -p:IncludeNativeLibrariesForSelfExtract=true
        -p:PublishTrimmed=true
        -p:GenerateDocumentationFile=false
        -p:AssemblyName=falu
        -p:EnableCompressionInSingleFile=true
        --runtime ${{ matrix.config.rid }}
        --configuration Release
        --output ${{ github.workspace }}/drop/${{ matrix.config.rid }}
        --self-contained true
        --no-restore
        src/FaluCli/FaluCli.csproj

    - name: Test (CLI) # ensure the CLI can launch (catches global DI issues)
      # ARM agents are in preview and we cannot use them, so we skip this test
      # TODO: consider using QEMU emulator for ARM?
      if: ${{ !contains(matrix.config.rid, 'arm') }}
      run: ./falu logout
      working-directory: ${{ github.workspace }}/drop/${{ matrix.config.rid }}

    - name: Publish Artifact (drop)
      uses: actions/upload-artifact@v3
      with:
        path: ${{ github.workspace }}/drop/**
        name: drop

    - name: Create Archive Folder
      run: mkdir ${{ github.workspace }}/releases

    - name: Create Archive (zip)
      uses: thedoctor0/zip-release@master
      if: startsWith(matrix.config.rid, 'win-')
      with:
        type: 'zip'
        filename: '${{ github.workspace }}/releases/falu-${{ env.GITVERSION_NUGETVERSIONV2 }}-${{ matrix.config.rid }}.zip'
        directory: ${{ github.workspace }}/drop/${{ matrix.config.rid }}

    - name: Create Archive (tar)
      uses: thedoctor0/zip-release@master
      if: ${{ !startsWith(matrix.config.rid, 'win-') }}
      with:
        type: 'tar'
        filename: '${{ github.workspace }}/releases/falu-${{ env.GITVERSION_NUGETVERSIONV2 }}-${{ matrix.config.rid }}.tar.gz'
        directory: ${{ github.workspace }}/drop/${{ matrix.config.rid }}

    - name: Prepare .debpkg and .rpmpkg
      if: startsWith(matrix.config.rid, 'linux-')
      run: |
        mkdir -p .debpkg/usr/bin
        cp -p ${{ github.workspace }}/drop/${{ matrix.config.rid }}/* .debpkg/usr/bin/

        mkdir -p .rpmpkg/usr/bin
        cp -p ${{ github.workspace }}/drop/${{ matrix.config.rid }}/* .rpmpkg/usr/bin/

    - name: 'Build DEB package'
      uses: jiro4989/build-deb-action@v3
      if: ${{ matrix.config.deb-arch }}
      with:
        desc: '${{ env.PKG_DESCRIPTION }}'
        maintainer: ${{ env.PKG_MAINTAINER }}
        version: ${{ env.GITVERSION_NUGETVERSIONV2 }}
        package: ${{ env.PKG_NAME }}
        package_root: .debpkg
        arch: '${{ matrix.config.deb-arch}}'

    - name: 'Build RPM package'
      uses: jiro4989/build-rpm-action@v2
      # TODO: figure out how to generate RPM package for ARM (it fails)
      # if: ${{ matrix.config.deb-arch }}
      if: matrix.config.rid == 'linux-x64'
      with:
        summary: '${{ env.PKG_DESCRIPTION }}'
        desc: '${{ env.PKG_DESCRIPTION }}'
        maintainer: ${{ env.PKG_MAINTAINER }}
        vendor: ${{ env.PKG_VENDOR }}
        license: ${{ env.PKG_LICENSE }}
        version: ${{ env.GITVERSION_MAJORMINORPATCH }}
        package: ${{ env.PKG_NAME }}
        package_root: .rpmpkg
        arch: '${{ matrix.config.rpm-arch}}'

    - name: Rename deb and rpm packages
      if: ${{ matrix.config.deb-arch || matrix.config.rpm-arch }}
      run: |
        src=falu_${{ env.GITVERSION_NUGETVERSIONV2 }}_${{ matrix.config.deb-arch}}.deb
        dest=${{ github.workspace }}/releases/falu-${{ env.GITVERSION_NUGETVERSIONV2 }}-linux-${{ matrix.config.deb-arch}}.deb
        mv $src $dest

        src=falu-${{ env.GITVERSION_MAJORMINORPATCH }}-1.el7.${{ matrix.config.rpm-arch}}.rpm
        dest=${{ github.workspace }}/releases/falu-${{ env.GITVERSION_NUGETVERSIONV2 }}-linux-${{ matrix.config.rpm-arch}}.rpm
        if [ -f $src ]; then
          mv $src $dest
        fi

    - name: Publish Artifact (releases)
      uses: actions/upload-artifact@v3
      with:
        path: ${{ github.workspace }}/releases/**
        name: releases

    - name: Test (DEB)
      # if: ${{ matrix.config.deb-arch }}
      if: matrix.config.rid == 'linux-x64'
      run: |
        sudo apt-get install -y -f \
        ${{ github.workspace }}/releases/falu-${{ env.GITVERSION_NUGETVERSIONV2 }}-linux-${{ matrix.config.deb-arch}}.deb

    # TODO: investigate why installing .rpm file fails due to requirements
    # - name: Test (RPM)
    #   if: ${{ matrix.config.rpm-arch }}
    #   run: |
    #     sudo rpm --install \
    #     ${{ github.workspace }}/releases/falu-${{ env.GITVERSION_NUGETVERSIONV2 }}-linux-${{ matrix.config.rpm-arch}}.rpm

  Checksum:
    runs-on: ubuntu-latest
    needs: [ Build ]

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: releases
        path: releases

    - name: Generate checksum
      uses: jmgilman/actions-generate-checksum@v1
      with:
        method: 'sha256'
        output: 'checksum.txt'
        patterns: |
          releases/falu-*.deb
          releases/falu-*.rpm
          releases/falu-*.tar.gz
          releases/falu-*.zip

    # retain only the file names
    # waiting on https://github.com/jmgilman/actions-generate-checksum/pull/2
    - name: Strip directory
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "releases/falu-"
        replace: "falu-"
        include: checksum.txt

    - name: Publish Artifact (releases)
      uses: actions/upload-artifact@v3
      with:
        path: checksum.txt
        name: releases

  Packaging:
    runs-on: macos-latest
    needs: [ Build ]
    outputs:
      BINARIES_VERSION: ${{ needs.Build.outputs.BINARIES_VERSION }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: releases
        path: ${{ github.workspace }}/releases

    - name: Prepare templates
      run: |
        mkdir -p ${{ github.workspace }}/generated/homebrew/
        mv packaging/homebrew/formula-template.rb ${{ github.workspace }}/generated/homebrew/falu.rb
        mkdir -p ${{ github.workspace }}/generated/scoop/
        mv packaging/scoop/bucket-template.json ${{ github.workspace }}/generated/scoop/falu.json

    - name: Prepare variables
      working-directory: ${{ github.workspace }}/releases
      run: |
        echo "BINARIES_VERSION=$BINARIES_VERSION" >> "$GITHUB_ENV"

        checksumMacARM64=$(shasum -a 256 falu-$BINARIES_VERSION-osx-arm64.tar.gz | cut -d " " -f 1)
        checksumMacX64=$(shasum -a 256 falu-$BINARIES_VERSION-osx-x64.tar.gz | cut -d " " -f 1)
        checksumLinuxARM64=$(shasum -a 256 falu-$BINARIES_VERSION-linux-arm64.tar.gz | cut -d " " -f 1)
        checksumLinuxX64=$(shasum -a 256 falu-$BINARIES_VERSION-linux-x64.tar.gz | cut -d " " -f 1)
        checksumWindowsARM64=$(shasum -a 256 falu-$BINARIES_VERSION-win-arm64.zip | cut -d " " -f 1)
        checksumWindowsX64=$(shasum -a 256 falu-$BINARIES_VERSION-win-x64.zip | cut -d " " -f 1)
        echo "MACOS_ARM64_BINARY_SHA256=$checksumMacARM64" >> "$GITHUB_ENV"
        echo "MACOS_X64_BINARY_SHA256=$checksumMacX64" >> "$GITHUB_ENV"
        echo "LINUX_ARM64_BINARY_SHA256=$checksumLinuxARM64" >> "$GITHUB_ENV"
        echo "LINUX_X64_BINARY_SHA256=$checksumLinuxX64" >> "$GITHUB_ENV"
        echo "WINDOWS_ARM64_BINARY_SHA256=$checksumWindowsARM64" >> "$GITHUB_ENV"
        echo "WINDOWS_X64_BINARY_SHA256=$checksumWindowsX64" >> "$GITHUB_ENV"
      env:
        BINARIES_VERSION: ${{ needs.Build.outputs.BINARIES_VERSION }}

    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["${{ github.workspace }}/generated/homebrew/falu.rb","${{ github.workspace }}/generated/scoop/falu.json"]'

    - name: Publish Artifact (releases)
      uses: actions/upload-artifact@v3
      with:
        path: ${{ github.workspace }}/generated
        name: releases

  Release:
    runs-on: ubuntu-latest
    needs: [ Checksum, Packaging ]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: releases
        path: ${{ github.workspace }}/releases

    - name: Upload Release
      uses: ncipollo/release-action@v1
      with:
        # comma-separated values ('>' will make it a single line)
        artifacts: >
          ${{ github.workspace }}/releases/checksum.txt,
          ${{ github.workspace }}/releases/falu-*.deb,
          ${{ github.workspace }}/releases/falu-*.rpm,
          ${{ github.workspace }}/releases/falu-*.tar.gz,
          ${{ github.workspace }}/releases/falu-*.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        allowUpdates: true

    - name: Update homebrew tap repository
      uses: dmnemec/copy_file_to_another_repo_action@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.RELEASING_GITHUB_TOKEN }}
      with:
        source_file: '${{ github.workspace }}/releases/homebrew/falu.rb'
        destination_repo: 'faluapp/homebrew-falu-cli'
        user_email: 'support@falu.io'
        user_name: 'falu-ci'
        commit_message: 'Update homebrew tap to ${{ needs.Packaging.outputs.BINARIES_VERSION }}'

    - name: Update scoop bucket repository
      uses: dmnemec/copy_file_to_another_repo_action@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.RELEASING_GITHUB_TOKEN }}
      with:
        source_file: '${{ github.workspace }}/releases/scoop/falu.json'
        destination_repo: 'faluapp/scoop-falu-cli'
        user_email: 'support@falu.io'
        user_name: 'falu-ci'
        commit_message: 'Update scoop bucket to ${{ needs.Packaging.outputs.BINARIES_VERSION }}'
