name: Build

on:
  push:
    # branches:
    #   - main
    tags:
    - '*'
    paths-ignore:
    - README.md
    - LICENSE
    - CHANGELOG.md
    - docs/**
  pull_request:
    branches:
    - main
    paths-ignore:
    - README.md
    - LICENSE
    - CHANGELOG.md
    - docs/**
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the action'
        required: false
        default: 'Pre-Release'

env:
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  Build:
    strategy:
      fail-fast: true
      matrix:
        config:
        - rid: linux-x64
          os: ubuntu-latest
        - rid: win-x64
          os: ubuntu-latest #windows-latest
        - rid: osx-x64
          os: ubuntu-latest #macos-latest

    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required for GitVersion
        submodules: true

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0
      id: gitversion
      with:
        useConfigFile: true

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.x'

    - name: Install dependencies
      run: dotnet restore --runtime ${{ matrix.config.rid }}

    - name: Build
      if: github.event_name == 'pull_request'
      run: dotnet build --configuration $buildConfiguration --no-restore

    - name: Test
      if: github.event_name == 'pull_request'
      run: dotnet test --configuration $buildConfiguration --no-build --verbosity normal --collect "Code coverage"

    - name: Publish
      run: >
        dotnet publish
        -p:PublishSingleFile=true
        -p:DebugType=None
        -p:DebugSymbols=false
        -p:IncludeNativeLibrariesForSelfExtract=true
        -p:PublishTrimmed=true
        -p:GenerateDocumentationFile=false
        -p:AssemblyName=falu
        -p:EnableCompressionInSingleFile=true
        --runtime ${{ matrix.config.rid }}
        --configuration $buildConfiguration
        --output $GITHUB_WORKSPACE/drop/${{ matrix.config.rid }}
        --self-contained true
        --no-restore
        src/FaluCli/FaluCli.csproj

    - name: Publish Artifact (drop)
      uses: actions/upload-artifact@v3
      with:
        path: ${{ github.workspace }}/drop/**
        name: drop

    - name: Create Archive Folder
      run: mkdir ${{ github.workspace }}/releases

    - name: Create Archive
      uses: thedoctor0/zip-release@master
      if: startsWith(matrix.config.rid, 'win-')
      with:
        type: 'zip'
        filename: '${{ github.workspace }}/releases/falu-${{ steps.gitversion.outputs.nuGetVersionV2 }}-${{ matrix.config.rid }}.zip'
        directory: ${{ github.workspace }}/drop/${{ matrix.config.rid }}

    - name: Create Archive
      uses: thedoctor0/zip-release@master
      if: startsWith(matrix.config.rid, 'win-') != true
      with:
        type: 'tar'
        filename: '${{ github.workspace }}/releases/falu-${{ steps.gitversion.outputs.nuGetVersionV2 }}-${{ matrix.config.rid }}.tar.gz'
        directory: ${{ github.workspace }}/drop/${{ matrix.config.rid }}

    - name: Publish Artifact (releases)
      uses: actions/upload-artifact@v3
      with:
        path: ${{ github.workspace }}/releases/**
        name: releases

  Release:
    runs-on: ubuntu-latest
    needs: [ Build ]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: releases

    - name: Upload Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: '${{ github.workspace }}/falu-*.zip,${{ github.workspace }}/falu-*.tar.gz'
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        allowUpdates: true
