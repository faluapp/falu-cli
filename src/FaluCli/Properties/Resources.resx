<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticationInformationMissing" xml:space="preserve">
    <value>Authentication information is missing.
Either pass an API key via --apikey option or perform login via 'falu login' command.</value>
  </data>
  <data name="Forbidden403Message" xml:space="preserve">
    <value>Either you or the API Key provided does not have permissions to perform this operation.
Consult your Falu dashboard to confirm the permissions of the API key or ask your administrator to grant you permissions.</value>
    <comment>Error message to display for HTTP 403 (Forbidden) responses.</comment>
  </data>
  <data name="HostNotFoundExceptionFormat" xml:space="preserve">
    <value>Seems there was a problem reaching api.falu.io. This likely a transient internet connectivity issue on this computer or its internet provider.
Try again after a short while.
If it persists, check your internet connection.
You can also check https://status.falu.io to see if there are any server related issues.</value>
  </data>
  <data name="InternalServerError500Message" xml:space="preserve">
    <value>Server encountered an error. You can try again later or contact support at https://falu.io/support</value>
  </data>
  <data name="InvalidE164PhoneNumber" xml:space="preserve">
    <value>Value for '{0}' is not a valid E.164 phone number: '{1}'</value>
  </data>
  <data name="InvalidEventTypeWildcard" xml:space="preserve">
    <value>Value '{0}' is not a valid event type for filtering.

Valid examples:
message.delivered
payment_refund.*</value>
  </data>
  <data name="InvalidHttpRequestPath" xml:space="preserve">
    <value>Value '{0}' is not a valid HTTP request path.

Valid examples:
/v1/messages
/v1/payments/*</value>
  </data>
  <data name="InvalidHttpStatusCode" xml:space="preserve">
    <value>Value '{0}' is not a valid HTTP status code. It should range between 200 and 599 (inclusive).</value>
  </data>
  <data name="InvalidInputValue" xml:space="preserve">
    <value>Value for '{0}' has invalid format. The expected pattern is '{1}'</value>
  </data>
  <data name="InvalidJsonInputValue" xml:space="preserve">
    <value>Value for '{0}' is not a valid JSON representation. Ensure it is a valid JSON object.</value>
  </data>
  <data name="LoginFailedFormat" xml:space="preserve">
    <value>Login request failed! {0}</value>
    <comment>Error message to display failed login/OIDC responses.</comment>
  </data>
  <data name="LoginFailedWithCodeFormat" xml:space="preserve">
    <value>Login request failed with code: {0}</value>
  </data>
  <data name="OptionDescriptionApiKey" xml:space="preserve">
    <value>The API key to use for the command. Use this for non-interractive setups such as process automation or when you cannot login using your account.
Looks like: fskt_LdVyn0upN...</value>
  </data>
  <data name="OptionDescriptionEventListenEventTypes" xml:space="preserve">
    <value>The event to listen for. When not provided all events are listened to or only those on the specified webhook endpoint. Setting this value overrides those from the webhook endpoint but does not edit it.
Examples:
message.delivered
payment_refund.*</value>
  </data>
  <data name="OptionDescriptionEventListenForwardTo" xml:space="preserve">
    <value>The URL that webhook events will be forwarded to. This can be localhost or a server somewhere.
Examples:
http://localhost:8080
https://localhost:8081
https://webhook.site/680567ce-6467-4d88-b7d1-266eebbcad6e</value>
  </data>
  <data name="OptionDescriptionEventListenSkipValidation" xml:space="preserve">
    <value>Whether to skip certificate verification when forwarding to a HTTPS endpoint. This option has no effect when forarding to a HTTP endpoint</value>
  </data>
  <data name="OptionDescriptionEventListenWebhookEndpoint" xml:space="preserve">
    <value>Unique identifier of the webhook endpoint to mirror. When specified, the event types and secret are pulled from it.
Example: we_610010be9228355f14ce6e08</value>
  </data>
  <data name="OptionDescriptionEventListenWebhookSecret" xml:space="preserve">
    <value>The webhook secret to use when generating values for X-Falu-Signature header. You can generate a random one or copy one from the webhook endpoint on the dashboard. This is useful for testing signature validation.</value>
  </data>
  <data name="OptionDescriptionIdempotencyKey" xml:space="preserve">
    <value>The key to make the request idempotent. This is only useful if you intend to repeat operations/requests that modify data but you only want the operation to effect once. For more information on idempotency see https://falu.io/docs/developers/idempotency
Example: my-awesome-op</value>
  </data>
  <data name="OptionDescriptionLive" xml:space="preserve">
    <value>Whether the entity resides or the operation should happen in live mode or not. Using this when you are logged into you account. It has no effect when using an API key.</value>
  </data>
  <data name="OptionDescriptionNoUpdates" xml:space="preserve">
    <value>Whether to disable update checks. Using this option overrides any value set in the configuration. This value can also be set globally using 'falu config set no-updates true'</value>
  </data>
  <data name="OptionDescriptionNoTelemetry" xml:space="preserve">
    <value>Whether to disable telemetry collection. Using this option overrides any value set in the configuration. This value can also be set globally using 'falu config set no-telemetry true'</value>
  </data>
  <data name="OptionDescriptionWorkspace" xml:space="preserve">
    <value>The identifier of the workspace being accessed. Use this when you are logged into your account and you want to specify which workspace to target.
Example: wksp_610010be9228355f14ce6e08</value>
  </data>
  <data name="ProblemDetailsErrorCodeFormat" xml:space="preserve">
    <value>Error Code: {0} (See docs at https://falu.io/docs/error-codes#{0})</value>
  </data>
  <data name="ProblemDetailsErrorDetailFormat" xml:space="preserve">
    <value>Error Detail: {0}</value>
  </data>
  <data name="ProblemDetailsErrorsFormat" xml:space="preserve">
    <value>Errors: {0}</value>
  </data>
  <data name="RefreshingAccessTokenFailed" xml:space="preserve">
    <value>Refreshing access token failed. Most likely the refresh token is no longer valid.
You can clear authentication information using the command:
falu config clear auth</value>
  </data>
  <data name="RequestFailedHeader" xml:space="preserve">
    <value>Request to Falu servers failed.</value>
  </data>
  <data name="RequestIdFormat" xml:space="preserve">
    <value>Request Id: {0}</value>
  </data>
  <data name="TooManyMessagesToBeSent" xml:space="preserve">
    <value>Message destinations (to) cannot exceed {0:n0} in one request.</value>
  </data>
  <data name="TraceIdentifierFormat" xml:space="preserve">
    <value>Trace Identifier: {0}</value>
  </data>
  <data name="Unauthorized401ErrorMessage" xml:space="preserve">
    <value>The API key provided cannot authenticate your request.
Confirm you have provided the right value and that it matches any other related values.
For example, do not use a key that belongs to another workspace or mix live and test mode keys.
If you are not using an API key ensure you have logged correctly.</value>
    <comment>Error message to display for HTTP 401 (Unauthorized) responses.</comment>
  </data>
  <data name="UnhandledExceptionFormat" xml:space="preserve">
    <value>Unhandled exception: {0}</value>
  </data>
  <data name="OptionDescriptionRealtimeConnectionTtl" xml:space="preserve">
    <value>The connection time-to-live (TTL) for the realtime connection.
This is the maximum time the connection can be open before it is forcefully closed by the server.</value>
  </data>
  <data name="InvalidDurationValue" xml:space="preserve">
    <value>The provided value: '{0}' must be a valid ISO8601 duration e.g. PT15M for 15 minutes or P1DT2H for 1 day and 2 hours.</value>
  </data>
</root>